{"version":3,"sources":["types.d.ts","translation.ts","syntax-highlight.ts","Codeblock.tsx","samples.ts","App.tsx","index.tsx"],"names":["Language","uncapitalize","text","charAt","toLowerCase","slice","translateJson2Kotlin","code","translate","Kotlin","JSON","translateKotlin2Ts","TypeScript","target","source","jsonToGo","go","error","replace","Error","snakeToCamel","g","toUpperCase","json","typename","scope","flatten","tabs","seen","stack","accumulator","innerTabs","parent","parse","e","message","format","append","parseScope","depth","Array","isArray","sliceType","scopeLength","length","i","thisType","goType","mostSpecificPossibleGoType","includes","appender","allFields","keys","Object","k","keyname","existingValue","value","currentValue","compareObjects","comparisonResult","compareObjectKeys","uuidv4","count","struct","omitempty","elem","parseStruct","push","parentType","scopeKeys","formatScopeKeys","pop","getOriginalName","finalKeyname","indenter","pluralize","singular","indent","str","match","substr","toProperCase","val","test","typ1","typ2","commonInitialisms","unused","sep","frag","indexOf","c","r","Math","random","toString","unique","tail","objectA","objectB","object","prototype","call","itemAKeys","itemBKeys","lengthA","lengthB","item","hljs","registerLanguage","kotlin","typescript","highlight","language","toTitle","Codeblock","onInput","editable","ref","React","createRef","useState","className","html","onChange","evt","newClearText","current","el","textContent","onKeyDown","event","key","preventDefault","alert","disabled","SAMPLE_JSON","stringify","user_id","name","age","weight","Height","education","tertiary","secondary","friends","vaccinated","Header","style","color","fontSize","CodeSection","jsonError","setJsonError","jsonInput","setJsonInput","kotlinInput","setKotlinInput","Row","Col","minWidth","marginTop","input","parsedJson","stringifiedInput","err","Footer","href","App","Container","maxWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2cb6d955.chunk.js","sourcesContent":["export enum Language {\n    JSON = \"json\",\n    Kotlin = \"kotlin\",\n    TypeScript = \"typescript\"\n}\n","/*\n\tJSON-to-Go\n\tby Matt Holt\n\n\thttps://github.com/mholt/json-to-go\n\n\tA simple utility to translate JSON into a Go type definition.\n*/\n\nimport pluralize from 'pluralize';\nimport { Language } from './types.d';\n\nconst uncapitalize = (text: string) => {\n    return text.charAt(0).toLowerCase() + text.slice(1);\n}\n\nexport const translateJson2Kotlin = (code: string) => translate(Language.Kotlin, Language.JSON, code)!.text;\nexport const translateKotlin2Ts = (code: string) => translate(Language.TypeScript, Language.Kotlin, code)!.text;\nexport const translate = (target: Language, source: Language, text: string): { text: string, error: string } | undefined => {\n\n\tif (source === Language.JSON && target === Language.Kotlin) {\n\t\tlet { go, error } = jsonToGo(text);\n\t\tgo.replace(/<undefined>/g, \"<Any>\"); //hotfix\n\t\treturn {\n\t\t\ttext: go,\n\t\t\terror: error\n\t\t}\n\n\t} else if (source === Language.Kotlin && target === Language.TypeScript) {\n\t\treturn {\n\t\t\ttext: text.replace(/data class/g, \"export type\").replace(/val /g, \"\").replace(/\\t@JsonProperty\\(.*\\n/g, \"\")\n\t\t\t\t.replace(/\\)/g, \"};\").replace(/\\(/g, \" = {\").replace(/(List)<(.*)>/g, \"$2[]\")\n\t\t\t\t.replace(/: String/g, \": string\").replace(/: Int|: Float/g, \": number\").replace(/: Any/g, \": any\")\n\t\t\t\t.replace(/: Boolean/g, \": boolean\").replace(/undefined/g, \"any\").replace(/UUID/g, \"string\"),\n\t\t\terror: ''\n\t\t}\n\n\t} else {\n\t\tthrow new Error(\"Illegal state\")\n\t}\n}\n\nconst snakeToCamel = (text: string) => {\n\treturn text.replace(/([-_]\\w)/g, g => g[1].toUpperCase());\n}\n\nconst jsonToGo = (json: string, typename?: string, flatten = true) => {\n\tlet data;\n\tlet scope;\n\tlet go = \"\";\n\tlet tabs = 0;\n\n\tconst seen: any = {};\n\tconst stack: string[] = [];\n\tlet accumulator = \"\";\n\tlet innerTabs = 0;\n\tlet parent = \"\";\n\n\ttry {\n\t\tdata = JSON.parse(json.replace(/:(\\s*\\d*)\\.0/g, \":$1.1\")); // hack that forces floats to stay as floats\n\t\tscope = data;\n\t}\n\tcatch (e) {\n\t\treturn {\n\t\t\tgo: \"\",\n\t\t\terror: e.message\n\t\t};\n\t}\n\n\ttypename = format(typename || \"AutoGenerated\");\n\tappend(`data class ${typename}`);\n\n\tparseScope(scope);\n\n\treturn {\n\t\tgo: flatten\n\t\t\t? go += accumulator\n\t\t\t: go\n\t};\n\n\n\tfunction parseScope(scope: any, depth = 0) {\n\t\tif (typeof scope === \"object\" && scope !== null) {\n\t\t\tif (Array.isArray(scope)) {\n\t\t\t\tlet sliceType: any;\n\t\t\t\tconst scopeLength = scope.length;\n\n\t\t\t\tfor (let i = 0; i < scopeLength; i++) {\n\t\t\t\t\tconst thisType = goType(scope[i]);\n\t\t\t\t\tif (!sliceType)\n\t\t\t\t\t\tsliceType = thisType;\n\t\t\t\t\telse if (sliceType !== thisType) {\n\t\t\t\t\t\tsliceType = mostSpecificPossibleGoType(thisType, sliceType);\n\t\t\t\t\t\tif (sliceType === \"Any\")\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst slice = flatten && [\"struct\", \"slice\"].includes(sliceType)\n\t\t\t\t\t? `List<${format(parent)}>`\n\t\t\t\t\t: `List`;\n\n\t\t\t\tif (flatten && depth >= 2)\n\t\t\t\t\tappender(slice);\n\t\t\t\telse\n\t\t\t\t\tappend(slice)\n\t\t\t\tif (sliceType === \"struct\") {\n\t\t\t\t\tconst allFields: any = {};\n\n\t\t\t\t\t// for each field counts how many times appears\n\t\t\t\t\tfor (let i = 0; i < scopeLength; i++) {\n\t\t\t\t\t\tconst keys = Object.keys(scope[i])\n\t\t\t\t\t\tfor (let k in keys) {\n\t\t\t\t\t\t\tlet keyname = keys[k];\n\t\t\t\t\t\t\tif (!(keyname in allFields)) {\n\t\t\t\t\t\t\t\tallFields[keyname] = {\n\t\t\t\t\t\t\t\t\tvalue: scope[i][keyname],\n\t\t\t\t\t\t\t\t\tcount: 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tconst existingValue = allFields[keyname].value;\n\t\t\t\t\t\t\t\tconst currentValue = scope[i][keyname];\n\n\t\t\t\t\t\t\t\tif (compareObjects(existingValue, currentValue)) {\n\t\t\t\t\t\t\t\t\tconst comparisonResult = compareObjectKeys(\n\t\t\t\t\t\t\t\t\t\tObject.keys(currentValue),\n\t\t\t\t\t\t\t\t\t\tObject.keys(existingValue)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tif (!comparisonResult) {\n\t\t\t\t\t\t\t\t\t\tkeyname = `${keyname}_${uuidv4()}`;\n\t\t\t\t\t\t\t\t\t\tallFields[keyname] = {\n\t\t\t\t\t\t\t\t\t\t\tvalue: currentValue,\n\t\t\t\t\t\t\t\t\t\t\tcount: 0\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tallFields[keyname].count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a common struct with all fields found in the current array\n\t\t\t\t\t// omitempty dict indicates if a field is optional\n\t\t\t\t\tconst keys = Object.keys(allFields), struct: any = {}, omitempty: any = {};\n\t\t\t\t\tfor (let k in keys) {\n\t\t\t\t\t\tconst keyname = keys[k], elem = allFields[keyname];\n\n\t\t\t\t\t\tstruct[keyname] = elem.value;\n\t\t\t\t\t\tomitempty[keyname] = elem.count !== scopeLength;\n\t\t\t\t\t}\n\t\t\t\t\tparseStruct(depth + 1, innerTabs, struct, omitempty); // finally parse the struct !!\n\t\t\t\t}\n\t\t\t\telse if (sliceType === \"slice\") {\n\t\t\t\t\tparseScope(scope[0], depth)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (flatten && depth >= 2) {\n\t\t\t\t\t\t// appender(`<${sliceType}>&&&` || \"interface{}\");\n\t\t\t\t\t\tappender(`<${sliceType}>,\\n` || \"Any\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tappend(`<${sliceType}>` || \"Any\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (flatten) {\n\t\t\t\t\tif (depth >= 2) {\n\t\t\t\t\t\tappender(format(parent))\n\t\t\t\t\t\t// appender(\",!!!\\n\")\n\t\t\t\t\t\tappender(\",\\n\")\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tappend(format(parent))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tparseStruct(depth + 1, innerTabs, scope);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (flatten && depth >= 2) {\n\t\t\t\tappender(goType(scope));\n\t\t\t\t// appender(\",888\\n\")\n\t\t\t\tappender(\",\\n\")\n\t\t\t}\n\t\t\telse {\n\t\t\t\tappend(goType(scope));\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction parseStruct(depth: any, innerTabs: any, scope: any, omitempty: any = null) {\n\t\tif (flatten) {\n\t\t\tstack.push(\n\t\t\t\tdepth >= 2\n\t\t\t\t\t? \"\\n\\n\"\n\t\t\t\t\t: \"\"\n\t\t\t)\n\t\t}\n\n\t\tif (flatten && depth >= 2) {\n\t\t\tconst parentType = `data class ${format(parent)}`;\n\t\t\tconst scopeKeys = formatScopeKeys(Object.keys(scope));\n\n\t\t\t// this can only handle two duplicate items\n\t\t\t// future improvement will handle the case where there could\n\t\t\t// three or more duplicate keys with different values\n\t\t\tif (parent in seen && compareObjectKeys(scopeKeys, seen[parent])) {\n\t\t\t\tstack.pop();\n\t\t\t\treturn\n\t\t\t}\n\t\t\tseen[parent] = scopeKeys;\n\n\t\t\tappender(`${parentType}(\\n`);\n\t\t\t++innerTabs;\n\t\t\tconst keys = Object.keys(scope);\n\t\t\tfor (let i in keys) {\n\t\t\t\tconst keyname = getOriginalName(keys[i]);\n\n\t\t\t\tconst finalKeyname = uncapitalize(snakeToCamel(format(keyname)));\n\n\t\t\t\t// annotation\n\t\t\t\t// if (format(keyname) !== keyname || finalKeyname !== keyname) {\n\t\t\t\tif (finalKeyname !== keyname) {\n\t\t\t\t\tindenter(tabs);\n\t\t\t\t\tappender('@JsonProperty(\"' + keyname);\n\t\t\t\t\tif (omitempty && omitempty[keys[i]] === true) {\n\t\t\t\t\t\tappender(',omitempty');\n\t\t\t\t\t}\n\t\t\t\t\t// appender('\"`\\n');\n\t\t\t\t\tappender('\")\\n');\n\t\t\t\t}\n\n\t\t\t\t// const typename = format(keyname)\n\t\t\t\tindenter(tabs);\n\t\t\t\tconst typename = finalKeyname\n\t\t\t\tappender(\"val \" + typename + \": \");\n\n\t\t\t\t// type\n\t\t\t\tparent = pluralize.singular(typename)\n\t\t\t\tparseScope(scope[keys[i]], depth);\n\t\t\t}\n\t\t\tindenter(--innerTabs);\n\t\t\t// appender(\"fghj)\");\n\t\t\tappender(\")\");\n\t\t}\n\t\telse {\n\t\t\tappend(\"(\\n\");\n\t\t\t++tabs;\n\t\t\tconst keys = Object.keys(scope);\n\t\t\tfor (let i in keys) {\n\t\t\t\tconst keyname = getOriginalName(keys[i]);\n\n\t\t\t\tconst finalKeyname = uncapitalize(snakeToCamel(format(keyname)));\n\n\t\t\t\t// annotation\n\t\t\t\tif (keyname !== finalKeyname) {\n\t\t\t\t// if (format(keyname) !== keyname || keyname !== finalKeyname) {\n\t\t\t\t\tindent(tabs);\n\t\t\t\t\tappend('@JsonProperty(\"' + keyname);\n\t\t\t\t\tif (omitempty && omitempty[keys[i]] === true) {\n\t\t\t\t\t\tappend(',omitempty');\n\t\t\t\t\t}\n\t\t\t\t\tappend('\")\\n');\n\t\t\t\t}\n\n\t\t\t\t// variable name\n\t\t\t\tindent(tabs);\n\t\t\t\tconst typename = finalKeyname;\n\t\t\t\tappend(\"val \" + typename + \": \");\n\n\t\t\t\t// type\n\t\t\t\tparent = pluralize.singular(typename)\n\t\t\t\tparseScope(scope[keys[i]], depth);\n\t\t\t\tappend(\",\\n\");\n\t\t\t}\n\t\t\tindent(--tabs);\n\t\t\tappend(\")\");\n\t\t}\n\t\tif (flatten)\n\t\t\taccumulator += stack.pop();\n\t}\n\n\tfunction indent(tabs: any) {\n\t\tfor (let i = 0; i < tabs; i++)\n\t\t\tgo += '\\t';\n\t}\n\n\tfunction append(str: string) {\n\t\tgo += str;\n\t}\n\n\tfunction indenter(tabs: any) {\n\t\tfor (let i = 0; i < tabs; i++)\n\t\t\tstack[stack.length - 1] += '\\t';\n\t}\n\n\tfunction appender(str: string) {\n\t\tstack[stack.length - 1] += str;\n\t}\n\n\t// Sanitizes and formats a string to make an appropriate identifier in Go\n\tfunction format(str: string) {\n\t\tif (!str)\n\t\t\treturn \"\";\n\t\telse if (str.match(/^\\d+$/))\n\t\t\tstr = \"Num\" + str;\n\t\telse if (str.charAt(0).match(/\\d/)) {\n\t\t\tconst numbers: any = {\n\t\t\t\t'0': \"Zero_\", '1': \"One_\", '2': \"Two_\", '3': \"Three_\",\n\t\t\t\t'4': \"Four_\", '5': \"Five_\", '6': \"Six_\", '7': \"Seven_\",\n\t\t\t\t'8': \"Eight_\", '9': \"Nine_\"\n\t\t\t};\n\t\t\tstr = numbers[str.charAt(0)] + str.substr(1);\n\t\t}\n\t\treturn toProperCase(str).replace(/[^a-z0-9]/ig, \"\") || \"NAMING_FAILED\";\n\t}\n\n\t// Determines the most appropriate Go type\n\tfunction goType(val: any) {\n\t\tif (val === null)\n\t\t\treturn \"Any\";\n\n\t\tswitch (typeof val) {\n\t\t\tcase \"string\":\n\t\t\t\tif (/^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(val))\n\t\t\t\t\treturn \"UUID\"\n\t\t\t\telse if (/\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(\\+\\d\\d:\\d\\d|Z)/.test(val))\n\t\t\t\t\treturn \"time.Time\";\n\t\t\t\telse\n\t\t\t\t\treturn \"String\";\n\t\t\tcase \"number\":\n\t\t\t\tif (val % 1 === 0)\n\t\t\t\t\treturn \"Int\";\n\t\t\t\telse\n\t\t\t\t\treturn \"Float\";\n\t\t\tcase \"boolean\":\n\t\t\t\treturn \"Boolean\";\n\t\t\tcase \"object\":\n\t\t\t\tif (Array.isArray(val))\n\t\t\t\t\treturn \"slice\";\n\t\t\t\treturn \"struct\";\n\t\t\tdefault:\n\t\t\t\treturn \"Any\";\n\t\t}\n\t}\n\n\t// Given two types, returns the more specific of the two\n\tfunction mostSpecificPossibleGoType(typ1: string, typ2: string) {\n\t\tif (typ1.substr(0, 5) === \"float\"\n\t\t\t&& typ2.substr(0, 3) === \"int\")\n\t\t\treturn typ1;\n\t\telse if (typ1.substr(0, 3) === \"int\"\n\t\t\t&& typ2.substr(0, 5) === \"float\")\n\t\t\treturn typ2;\n\t\telse\n\t\t\treturn \"Any\";\n\t}\n\n\t// Proper cases a string according to Go conventions\n\tfunction toProperCase(str: string) {\n\t\t// ensure that the SCREAMING_SNAKE_CASE is converted to snake_case\n\t\tif (str.match(/^[_A-Z0-9]+$/)) {\n\t\t\tstr = str.toLowerCase();\n\t\t}\n\n\t\t// https://github.com/golang/lint/blob/5614ed5bae6fb75893070bdc0996a68765fdd275/lint.go#L771-L810\n\t\tconst commonInitialisms = [\n\t\t\t\"ACL\", \"API\", \"ASCII\", \"CPU\", \"CSS\", \"DNS\", \"EOF\", \"GUID\", \"HTML\", \"HTTP\",\n\t\t\t\"HTTPS\", \"ID\", \"IP\", \"JSON\", \"LHS\", \"QPS\", \"RAM\", \"RHS\", \"RPC\", \"SLA\",\n\t\t\t\"SMTP\", \"SQL\", \"SSH\", \"TCP\", \"TLS\", \"TTL\", \"UDP\", \"UI\", \"UID\", \"UUID\",\n\t\t\t\"URI\", \"URL\", \"UTF8\", \"VM\", \"XML\", \"XMPP\", \"XSRF\", \"XSS\"\n\t\t];\n\n\t\treturn str.replace(/(^|[^a-zA-Z])([a-z]+)/g, function (unused, sep, frag) {\n\t\t\tif (commonInitialisms.indexOf(frag.toUpperCase()) >= 0)\n\t\t\t\treturn sep + frag.toUpperCase();\n\t\t\telse\n\t\t\t\treturn sep + frag[0].toUpperCase() + frag.substr(1).toLowerCase();\n\t\t}).replace(/([A-Z])([a-z]+)/g, function (unused, sep, frag) {\n\t\t\tif (commonInitialisms.indexOf(sep + frag.toUpperCase()) >= 0)\n\t\t\t\treturn (sep + frag).toUpperCase();\n\t\t\telse\n\t\t\t\treturn sep + frag;\n\t\t});\n\t}\n\n\tfunction uuidv4() {\n\t\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n\t\t\tvar r = Math.random() * 16 | 0, v = c === 'x' ? r : ((r & 0x3) | 0x8);\n\t\t\treturn v.toString(16);\n\t\t});\n\t}\n\n\tfunction getOriginalName(unique: string) {\n\t\tconst reLiteralUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i\n\t\tconst uuidLength = 36;\n\n\t\tif (unique.length >= uuidLength) {\n\t\t\tconst tail = unique.substr(-uuidLength);\n\t\t\tif (reLiteralUUID.test(tail)) {\n\t\t\t\treturn unique.slice(0, -1 * (uuidLength + 1))\n\t\t\t}\n\t\t}\n\t\treturn unique\n\t}\n\n\tfunction compareObjects(objectA: any, objectB: any) {\n\t\tconst object = \"[object Object]\";\n\t\treturn Object.prototype.toString.call(objectA) === object\n\t\t\t&& Object.prototype.toString.call(objectB) === object;\n\t}\n\n\tfunction compareObjectKeys(itemAKeys: any, itemBKeys: any) {\n\t\tconst lengthA = itemAKeys.length;\n\t\tconst lengthB = itemBKeys.length;\n\n\t\t// nothing to compare, probably identical\n\t\tif (lengthA === 0 && lengthB === 0)\n\t\t\treturn true;\n\n\t\t// duh\n\t\tif (lengthA !== lengthB)\n\t\t\treturn false;\n\n\t\tfor (let item of itemAKeys) {\n\t\t\tif (!itemBKeys.includes(item))\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction formatScopeKeys(keys: any) {\n\t\tfor (let i in keys) {\n\t\t\tkeys[i] = format(keys[i]);\n\t\t}\n\t\treturn keys\n\t}\n}\n\n// if (typeof module != 'undefined') {\n// \tif (!module.parent) {\n// \t\tif (process.argv.length > 2 && process.argv[2] === '-big') {\n// \t\t\tbufs = []\n// \t\t\tprocess.stdin.on('data', function (buf) {\n// \t\t\t\tbufs.push(buf)\n// \t\t\t})\n// \t\t\tprocess.stdin.on('end', function () {\n// \t\t\t\tconst json = Buffer.concat(bufs).toString('utf8')\n// \t\t\t\tconsole.log(jsonToGo(json).go)\n// \t\t\t})\n// \t\t} else {\n// \t\t\tprocess.stdin.on('data', function (buf) {\n// \t\t\t\tconst json = buf.toString('utf8')\n// \t\t\t\tconsole.log(jsonToGo(json).go)\n// \t\t\t})\n// \t\t}\n// \t} else {\n// \t\tmodule.exports = jsonToGo\n// \t}\n// }\n\n\n","import hljs from 'highlight.js/lib/core';\nimport json from 'highlight.js/lib/languages/json';\nimport kotlin from 'highlight.js/lib/languages/kotlin';\nimport typescript from 'highlight.js/lib/languages/typescript';\nimport { Language } from './types.d';\nimport 'highlight.js/styles/base16/tomorrow-night.css';\n// import 'highlight.js/styles/vs2015.css';\n\n// don't use these\n// import 'highlight.js/styles/base16/seti-ui.css';\n// import 'highlight.js/styles/an-old-hope.css';\n// import 'highlight.js/styles/stackoverflow-dark.css';\n// import 'highlight.js/styles/atom-one-dark.css';\n// import 'highlight.js/styles/lioshi.css';\n// import 'highlight.js/styles/github-dark-dimmed.css';\n\nhljs.registerLanguage(Language.JSON, json);\nhljs.registerLanguage(Language.Kotlin, kotlin);\nhljs.registerLanguage(Language.TypeScript, typescript);\n\nconst highlight = (text: string, language: Language): string => {\n    return hljs.highlight(text, { language: language }).value;\n};\n\nexport default highlight;\n","import React, { useState } from 'react';\nimport './App.css';\nimport ContentEditable, { ContentEditableEvent } from 'react-contenteditable'\nimport { Language } from './types.d';\nimport highlight from './syntax-highlight';\n\nconst toTitle = (language: Language): string => {\n    switch (language) {\n        case Language.JSON: return \"JSON\";\n        case Language.Kotlin: return \"Kotlin\";\n        case Language.TypeScript: return \"TypeScript\";\n    };\n}\n\ninterface CodeblockProps {\n    code: string,\n    onInput?: (code: string) => void,\n    language: Language,\n    editable: boolean,\n};\n\nconst Codeblock: React.FC<CodeblockProps> = ({ code, onInput, language, editable }) => {\n\n    const ref = React.createRef<any>(); // any because the lib defined the type poorly\n    const [caretPos, setCaretPos] = useState(0);\n    // const [caretParentNode, setCaretParentNode] = useState<ParentNode | null>(null);\n    const [caretParentNodeIdx, setCaretParentNodeIdx] = useState<number | null>(null);\n\n    const handleOnChange = (evt: ContentEditableEvent) => {\n        if (ref) {\n            // setCaret();\n            let htmlDivElRef = ref.current.el as React.MutableRefObject<HTMLDivElement>;\n            let newClearText = htmlDivElRef.current.textContent ?? \"\";\n            onInput?.(newClearText);\n        }\n    };\n\n    const handleOnKeyDown: React.KeyboardEventHandler<HTMLDivElement> = (event) => {\n        if (event.key === \"Tab\") {\n            event.preventDefault();\n            alert(\"Congrats! You found a feature that is currently being worked on! Press space 4 times instead.\");\n        }\n    };\n\n    // Problematic\n    // eslint-disable-next-line\n    const setCaret = () => {\n\n        let el = document.getElementsByClassName(\"App-code\")[0];\n        let range = document.createRange();\n        let sel = window.getSelection();\n\n        if (sel && sel.rangeCount) {\n            let oldRange = sel.getRangeAt(0);\n            let node = oldRange.commonAncestorContainer.parentNode;\n\n            console.log(node)\n\n            if (node === el) {\n                // idk why it comes here)\n                // range.setStart(caretNode!, caretPos);\n\n\n                // if (node.childNodes[caretParentNodeIdx!].firstChild!.textContent!.length <= caretPos) {\n                console.log(node.childNodes[caretParentNodeIdx!].firstChild!.textContent?.length);\n                console.log(caretPos)\n\n                range.setStart(node.childNodes[caretParentNodeIdx!].firstChild!, caretPos);\n                // range.setStart(node.childNodes[8].firstChild, caretPos);\n                // range.setStart((caretParentNode! as any).firstChild, caretPos);\n\n                range.collapse(true)\n                sel.removeAllRanges()\n                sel.addRange(range)\n                // }\n            } else if (node !== null) {\n\n                alert(node.childNodes.length)\n\n                // true branch\n                let caretPos = oldRange.endOffset;\n                range.setStart(node.firstChild!, caretPos);\n                setCaretPos(caretPos);\n                // setCaretParentNode(node);\n\n                range.collapse(true)\n                sel.removeAllRanges()\n                sel.addRange(range)\n\n                var i = 0;\n                while (((node as any) = node.previousSibling) != null)\n                    i++;\n                setCaretParentNodeIdx(i);\n                alert(i)\n\n            } else {\n                alert('dfvd')\n            }\n        }\n    }\n\n    return <>\n        <p>{toTitle(language)}</p>\n        <ContentEditable\n            className=\"App-code\"\n            ref={ref}\n            html={highlight(code, language)}\n            onChange={handleOnChange}\n            onKeyDown={handleOnKeyDown}\n            disabled={!editable}\n        />\n    </>;\n}\n\nexport default Codeblock;\n","const SAMPLE_INPUT = {\n  user_id: \"cf9c9435-ba42-4bb5-b2e1-ea316e9adc25\",\n  name: \"ali\",\n  age: 25,\n  weight: 60.5,\n  Height: 170,\n  education: {\n    tertiary: \"Singapore University\",\n    secondary: \"Singapore Sec Sch\"\n  },\n  friends: [\n    {\n      name: \"mei ling\",\n      age: 21\n    },\n    {\n      name: \"raju\",\n      age: 23\n    }\n  ],\n  vaccinated: true\n}\n\nexport const SAMPLE_JSON = JSON.stringify(SAMPLE_INPUT, null, 2);\n","import React, { useState } from 'react';\nimport './App.css';\nimport { translateJson2Kotlin, translateKotlin2Ts } from './translation';\nimport { Language } from './types.d';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Codeblock from './Codeblock';\nimport { SAMPLE_JSON } from './samples';\n\n\nconst Header = () => <>\n  <br></br>\n  <h3>JSON to Kotlin to TypeScript</h3>\n  <p style={{ color: 'rgb(144,144,144)', fontSize: 16 }}>Convert JSON data to Kotlin data classes, then to TypeScript object types</p>\n  <br></br>\n</>;\n\nconst CodeSection = () => {\n  const [jsonError, setJsonError] = useState<string>('');\n  const [jsonInput, setJsonInput] = useState<string>(SAMPLE_JSON);\n  const [kotlinInput, setKotlinInput] = useState<string | null>(null);\n\n  const onJsonChange = (input: string) => {\n    try {\n      let parsedJson = JSON.parse(input);\n      let stringifiedInput = JSON.stringify(parsedJson, null, 2);\n      setJsonError('');\n      setJsonInput(stringifiedInput);\n      setKotlinInput(null);\n\n    } catch (err) {\n      setJsonError(`😰 ${(err as SyntaxError).message}`);\n      setJsonInput(input);\n    }\n  };\n\n  const onKotlinChange = (input: string) => {\n    setKotlinInput(input);\n    setJsonInput('');\n  };\n\n  return <>\n    <Row>\n      <Col style={{ minWidth: '520px', marginTop: 24 }}>\n        <Codeblock\n          code={jsonInput}\n          onInput={onJsonChange}\n          language={Language.JSON}\n          editable={true}\n        />\n        <br></br>\n        <code>{jsonError}</code>\n      </Col>\n      <Col style={{ minWidth: '480px', marginTop: 24 }}>\n        <Codeblock\n          code={kotlinInput ?? translateJson2Kotlin(jsonInput)}\n          onInput={onKotlinChange}\n          language={Language.Kotlin}\n          editable={true}\n        />\n      </Col>\n      <Col style={{ minWidth: '520px', marginTop: 24 }}>\n        <Codeblock\n          code={kotlinInput ?\n            translateKotlin2Ts(kotlinInput) : translateKotlin2Ts(translateJson2Kotlin(jsonInput))\n          }\n          language={Language.TypeScript}\n          editable={false}\n        />\n      </Col>\n    </Row>\n    <br></br>\n    <hr></hr>\n  </>;\n};\n\nconst Footer = () => (\n  <footer className=\"footer\">\n    <br></br>\n    <p>Features</p>\n    <ul>\n      <li>Convert JSON to Kotlin data classes</li>\n      <li>Convert Kotlin data classes to TypeScript object types as type aliases</li>\n      <li>Singularise the keys of items which are arrays</li>\n      <li>Convert keys to lowerCamelCase with <a href=\"https://fasterxml.github.io/jackson-annotations/javadoc/2.8/com/fasterxml/jackson/annotation/JsonProperty.html\">JsonProperty annotation</a> (for Kotlin)</li>\n    </ul>\n    <p>Non-features</p>\n    <ul>\n      <li>Nullable types</li>\n    </ul>\n    <p>To-do (see mood)</p>\n    <ul>\n      <li>JSON array</li>\n      <li>Maintain caret position (DOM &#128549;)</li>\n      <li>Cmd Z (DOM &#128549;)</li>\n      <li>Tab behaviour (DOM &#128549;)</li>\n    </ul>\n    <p>Built with React and React Bootstrap. Parser adapted from <a href=\"https://mholt.github.io/json-to-go/\">JSON-to-Go</a>. Syntax highlighting theme by <a href=\"https://github.com/highlightjs/highlight.js/blob/main/src/styles/base16/tomorrow-night.css\">Tomorrow Night</a>.</p>\n    <p style={{ color: 'rgb(144,144,144)', fontSize: 12 }}>By Raimi</p>\n  </footer>\n);\n\nconst App = () => (\n  <div className=\"App\">\n    <Container style={{ maxWidth: '1880px' }}>\n      <Header />\n      <CodeSection />\n      <Footer />\n    </Container >\n  </div >\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}